def graph_of_data(df):
    #--Merge these columns, will be labels of the nodes
    df["Name"] = df["Candidate surname"].astype("str") +" " + df["Candidate First Name"].astype("str")
    #--Create the DiGraph
    G = nx.DiGraph()
    count_lst = list(df["Count Number"].unique())
    count_lst.remove(1)
    #--Filter by count
    for count in count_lst:
        filtered_df1 = df[df["Count Number"]==count]
        #--get names of those whose votes are transferred
        src_cands = filtered_df1[filtered_df1["Transfers"]<0]
        #--get names of those who receive these transfers
        to_cands =filtered_df1[filtered_df1["Transfers"]>0]
        src_names = list(src_cands["Name"].values)
        to_names = list(to_cands["Name"].values)
        #--get number of transfers
        wgts = list(to_cands["Transfers"].values)
        
        #--Create a weighted edge between each source candidate and each target candidate
        
        for i in range(len(src_names)):
            edge_list = []
            for j in range(len(to_names)):
                edge = (src_names[i],to_names[j],wgts[j])
                print(edge)
                edge_list.append(edge)
            G.add_weighted_edges_from(edge_list)
    return G
    
